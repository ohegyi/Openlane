Processor layout:
Package (pins labeled and shown in connection to chip): 

Pad (outer ring of blue) - send signal through chip (info can be transferred in and out chip through this)
Core (black) - all digital logic
Foundry IP’s (yellow + grey) - need intelligence to build blocks
Macros (inner blue + small white)

RISC-V Instruction Set Architecture (ISA):
Compile computer language program to convert (ultimately) to machine language (ex. binary)
Hardware description language to implement RISC-V architecture specifications (ex. picorv 32 cpu core), which then goes to machine language
figure showing flow from user view to hardware:


app-> system software (OS, compiler, assembler) -> hardware

Role of OS:
IO operations
Memory control and assignment
Low level system processes
Translate to machine language via compiler + assembler
Compiler - code -> instructions(varies in syntax by hardware)*.exe file (abstract interface/instruction set architecture - language human connects to hardware)
Assembler - instructions -> binary (machine language) (RTL snipped gates netlist)

Diagram showing flow from app to hardware through system software:

To design ASIC’s:
RTL IP’s
EDA tools
PDK data
Many open source options of these for first two, now google x Skywater PDK (130 nm process, v current capacity 5 nm - still 60% market (bc not all need to be 5nm high tech, still cheaper) stil fase, ex. Intel: P4EE)
Separation of design only and fabrication only companies very recent
PDK = interface between two
Device model
Tech info
Design rule
Standard cell libraries
ASIC flow steps:
Synthesis:
-  design to HDL described component from standard cell library (diff. Models based on EDA tool)(gate level netlist, functionally like RTL)
FP + PP
Macro v full chip diffs
Design silicon, how power circuit
Die between components
Define macro dimensions + pin places, routing tracks
Power pens defined - parallel for less resistance
Placement
- on macros, gate level netlist plans placed
- Connected close
- global (optimal for all, but not necessarily legal) + detailed (min. alter from global for legality)
Clock routing
Deliver clock to all clock cells
Best shape
Min skew (diff time clock arrival)
Signal Route
Find valid placement horizontal + vertical wires given placement + metal layers (defined by pdk)
Routing grid out of metal layer tracks (mostly)
global, then fine grade
Sign Off
Make sure final layout matches netlist
Static timing analysis
Open source issues:
Tool qualification
Tool calibration
Missing tools
Openlane - open source flow for open source tapeout
Clean GDSII, no human intervention
Clean:
No LVS violations
No DRC violations
No timing violations
World w/ macros + chips

Openlane ASIC flow: 
Needs PDK
RTL synthesis
RTL fed to yosys w/ constraints
Yosys translates RTL to logic circuit
Optimized + mapped w/ abc (design explorer, report on bunch of configurations)
DFT (testing)
Auto simulation + test
Physical Implementation
FP + PP
End decoupling capacitors + tap cell insertion
Global+detailed placement + optimization pst
Clock tree synthesis
Routing, global + detailed
Fake antenna diodes insertion - charge collects on too long wire, charge accumulates, transistor damaged during fabrication (fixes bridging or antenna diodes (to take away charges)) preventive, fake antenna diode to every cell input after placement, if reports violation, replace w/ real diode 
LEC (logic equivalence testing)
Compare netlist from optimization w/ original
analysis
RC extraction
STA
To sign off, Design rules checking
In work/tools/openlane_woring_dir/pdks there are two items:
Libs.ref - specific to process
Libs.tech - specific to tool

We are interested in sky130_fd_sc_hd:
Techlef - layering info
Lib - time files (speed (process corners), temp, voltage)

After running: bash <(curl -s https://raw.githubusercontent.com/ZimengXiong/bASICs-openlane-apple-silicon-vm/refs/heads/main/patch-1.sh)
In terminal, launched openlane. In designs/ci:


Cd into picorv32a, in which there are a few items. Config.tcl bypasses configurations (one step above defaults –overrides)


./flow.tcl -interactive
package require openlane
prep -design designs/ci/picorv32a
Successful item creation :

Runs folder, showing dates of days prep -design, with one day opened:
Nothing in other files bc nothing run yet
Tmp directory (w/ merge … .lef files created: 
Config_in.tcl shows all parameters for run - updates after run floorplan (good to check modifications, flow correctly represented):

Cmds.log (record all commands):

Flop ratio: # D flip flops/cells
Proof if synthesis running: 
status report, with all info for flip flop ratios:
